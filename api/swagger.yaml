openapi: 3.0.3
info:
  title: API REST Simple
  description: |-

    ## Importante:

    ### Antes de realizar cualquier accion, primero realizar una peticion POST a la **ruta 'auth/login'** mas abajo

    #### Datos necesarios dentro del cuerpo de la peticion (ejemplo):

    ```json
    {
      "nombre":"usuariotest@test.com"
      "password":"simpletest"
    }
    ```

    ### Una vez obtenido el token en la respuesta. introducirlo clickeando en el boton **'Authorize'**

    #### Disfruta las consultas 



    link de google:
    [google](https://www.google.cl)
  contact:
    email: felipe.daniel.henriquez@gmail.com
  version: 3.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api
tags:
  - name: Usuarios
    description: CRUD usuarios (limitado al rol)
  - name: Auth
    description: Login simple
  - name: Categorias
    description: CRUD categorias
  - name: Productos
    description: CRUD productos
  - name: Buscar
    description: Funcion de buscar en':' productos, categorias y usuarios
paths:
  /usuarios/{id}:
  # Users - Get One
    get:
      tags:
        - Usuarios
      summary: Obtiene informacion del usuario con su id
      description: solo accesible si el usuario esta logeado
      operationId: usuarioGet
      parameters:
        - name: id
          in: path
          description: 'id del usuario'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - api_key: []
  # Users - Update
    put:
      tags:
        - Usuarios
      summary: Actualiza la informacion de un usuario
      description: Debe recibir un usuario en el body
      operationId: usuariosPut
      parameters:
        - name: id
          in: path
          description: id del usuario a modificar
          required: true
          schema:
            type: string
      requestBody:
        description: actualiza el usuario correspondiente al id segun la informacion dada aqui
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: actualizacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
      security:
        - api_key: []
  # Users - Delete
    delete:
      tags: 
        - Usuarios
      summary: Elimina un usuario por su id
      description: Obtener ID's de la ruta get '/usuarios'
      operationId: usuariosDelete
      parameters:
        - name: id
          in: path
          description: ID del usuario a eliminar
          required: true
          schema: 
            type: string
      responses:
        - '200':
            description: Usuario eliminado correctamente
      security:
        - api_key: []
  /usuarios:
  # Users - Get All
    get:
      tags: 
        - Usuarios
      summary: Obtiene un listado de todos los usuarios en una simple peticion.
      description: Solo entrega nombre y uid, para mas informacion sobre un usuario consultar en la ruta 'usuarios/{id}'
      operationId: usuariosGet
      parameters:
        - name: limite
          in: query
          description: la cantidad de usuarios a mostrar
          required: false
          schema:
            type: integer
            format: int64
            default: 3
      responses:
        '200':
          description: operacion exitosa
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsuariosArray'
      security:
        - api_key: []
  /auth/login:
  # Auth - Login
    post:
      tags:
        - Auth
      summary: Login
      description: Inicia sesion con tus credenciales y obten un token
      operationId: login
      requestBody:
        description: Usuario y contrase√±a
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioLogin'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /categorias/{id}:
  # Categories -  Get One 
    get:
      tags:
        - Categorias
      summary: Muestra la categoria con el id pasado por parametro
      description: solo requiere token. Accesible para cualquier tipo de usuario
      operationId: obtenerCategoria
      parameters:
        - name: id
          in: path
          description: 'id de la categoria'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categoria'
        '404':
          description: categoria no encontrada
  # Categories - Update
    put:
      tags:
        - Categorias
      summary: Actualiza una categoria
      description: Actualiza una categoria con el id (mongo objectId) pasado por la ruta
      operationId: actualizarCategoria
      parameters:
        - name: id
          in: path
          description: id de la categoria a actualizar
          required: true
          schema:
            type: string
      requestBody:
        description: Actualiza una categoria
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriaUpdate'
      responses:
        default: 
          description: operacion exitosa
      security:
        - api_key: []
  # Categories - Delete
    delete:
      tags:
        - Categorias
      summary: Elimina una categoria
      description: Elimina la categoria con el id pasado por parametro
      operationId: eliminarCategoria
      parameters:
        - name: id
          in: path
          description: id de la categoria que se va a eliminar
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Categoria eliminada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categoria/'
      security:
        - api_key: []
  /categorias:
  # Categories - Get All
    get:
      tags:
        - Categorias
      summary: Muestra todas las categorias de la base de Datos
      description: Token requerido
      operationId: obetnerCategorias
      parameters:
        - name: limite
          in: query
          description: la cantidad de categorias a mostrar
          required: false
          schema:
            type: integer
            format: int64
            default: 3
      responses:
        '200':
          description: operacion exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoriasArray'
        '404':
          description: no se encontro categoria
  # Categories - Create
    post:
      tags:
        - Categorias
      summary: Crea una categoria
      description: Crea una categoria a partir de un objeto JSON
      operatioId: crearCategoria
      requestBody:
        description: datos de la categoria
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
      responses:
        '200':
          description: Operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categoria'
        '400':
          description: Datos no Validos
      security:
        - api_key: []
  # Product - Get All
  /productos:
    get:
      tags:
        - Productos
      summary: Retorna todos los productos
      description: Esta ruta no requiere token de acceso
      operationId: obtenerProductos
      parameters:
        - name: limite
          in: query
          description: la cantidad de productos que se mostraran
          required: false
          schema:
            type: integer
            format: int64
            default: 3
      responses:
        '200':
          description: operacion exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductosArray'
  # Product - Create
    post:
      tags:
        - Productos
      summary: Crea un producto
      description: recibe un objeto en el body para crear el producto
      operationId: crearProducto
      requestBody:
        description: datos del producto
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/ProductoCreate'
  # Product - Get One
  /productos/{id}:
    get:
      tags:
        - Productos
      summary: Retorna un producto
      description: Entrega la informacion de un producto pasado por el path
      operationId: obtenerProducto
      parameters:
        - name: id
          in: path
          description: el id del producto a mostrar
          required: true
          schema:
            type: string
      responses:
        '200':
          description: operacion exitosa
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producto'
  # Product - Update
    put:
      tags:
        - Productos
      summary: actualiza un producto
      description: Actualiza el producto entregado por ruta
      operationId: actualizaProducto
      parameters:
        - name: id
          in: path
          description: el id del producto a actualizar
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ProductoUpdate'
      responses:
        '200':
          description: operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
      security:
        - api_key: []
  # Product - Delete
    delete:
      tags:
        - Productos
      summary: elimina un producto
      description: se debe entregar un id del producto a eliminar en la ruta
      operationId: borrarProducto
      parameters:
        - name: id
          in: path
          description: id del producto a eliminar
          required: true
          schema:
            type: string
      responses:
        - '200':
            description: Operacion Exitosa
      security:
        - api_key: []
  # Buscar
  /buscar/{coleccion}/{termino}:
    get:
      tags:
        - Buscar
      summary: busca un producto dentro de una coleccion
      description: Las colecciones pueden ser Categorias, Productos o Usuarios
      operationId: buscar
      parameters:
        - name: coleccion
          in: path
          description: nombre de la coleccion a buscar
          required: true
          schema:
            type: string
            example: categorias
        - name: termino
          in: path
          description: termino a utilizar como criterio de busqueda
          required: true
          schema: 
            type: string
            example: galleta
      responses:
        '200':
          description: operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/busquedaComponent'
############################ COMPONENTES #############################
components:
  busquedaComponent:
    allOf:
      - $ref: '#/components/schemas/UsuariosArray'
      - $ref: '#/components/schemas/CategoriasArray'
      - $ref: '#/components/schemas/ProductosArray'
  schemas:
    # Schema usuario
    Usuario:
      type: object
      properties:
        nombre:
          type: string
          example: Felipe
        correo:
          type: string
          format: email
          example: test1@test.com
        password:
          type: string
          minlength: 6
        img:
          type: string
        rol:
          type: string
          enum: [ADMIN_ROLE, USER_ROLE, SUPER_ROLE, VENTAS_ROLE]
        estado:
          type: boolean
        google:
          type: boolean
      required:
        - correo
        - password
    UsuariosArray:
      type: object
      properties:
        nombre:
          type: string
          example: Daniel
        uid:
          type: string
          example: 13HNO2I345BUOO123
    UsuarioLogin:
      type: object
      properties:
        correo:
          type: string
          example: testuser@email.com
        password:
          type: string
          example: 1234567890abc
    # Schema Token
    Token:
      type: object
      properties:
        usuario:
          type: string
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI2NjNkMDE5OTUxN2kNjhlMTVmZjIiLCJpaFHtrfYXQiOjE3MTc3Nzc0OTksImV4cCI6MTcxNzc5MTg5OX0.EwcG8vCY_7n6XMQj0A8G1zVGH1yh7v5Ubu75jOXayGE
    # Schema categoria
    Categoria:
      type: object
      properties:
        nombre:
          type: string
        estado:
          type: boolean
        usuario:
          type: string
      required:
        - nombre
        - estado
        - usuario
    CategoriasArray:
      type: object
      properties:
        _id:
          type: string
          example: 66858e66573dacf98ae9cey9
        nombre:
          type: string
          example: GALLETA
        usuario:
          type: object
          properties:
            _id:
              type: string
            nombre: 
              type: string
    CategoriaUpdate:
      type: object
      properties:
        nombre: 
          type: string
    # Schema productos
    Producto:
      type: object
      properties:
        nombre:
          type: string
        estado:
          type: boolean
        usuario: 
          type: string
        Categoria:
          type: string
        precio:
          type: number
        descripcion:
          type: string
        disponible:
          type: boolean
    ProductosArray:
      type: object
      properties:
        _id: 
          type: string
          example: 86ab7532dd4cff1e71dc9ct5
        nombre:
          type: string
          example: GALLLETA1
        usuario:
          type: string
          example: 663d0199517ffaad68e05fei
        categoria:
          type: object
          properties:
            _id:
              type: string
              example: 669a9f95a549dh726a24016o
        precio:
          type: integer
          format: int64
          example: 100
        descripcion:
          type: string
          example: "galletas de chocolate"
        disponible:
          type: boolean
          example: true
  requestBodies:
    ProductoCreate:
      description: producto generico
      content:
        application/json:
          schema:
            type: object
            properties:
              nombre:
                type: string
              categoria:
                type: string
              precio:
                type: integer
                format: int64
              descripcion:
                type: string
    ProductoUpdate:
            description: nombre del producto
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    nombre:
                      type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: x-token
      in: header